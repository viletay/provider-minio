// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BucketVersioningInitParameters struct {
	VersioningConfiguration []VersioningConfigurationInitParameters `json:"versioningConfiguration,omitempty" tf:"versioning_configuration,omitempty"`
}

type BucketVersioningObservation struct {
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	VersioningConfiguration []VersioningConfigurationObservation `json:"versioningConfiguration,omitempty" tf:"versioning_configuration,omitempty"`
}

type BucketVersioningParameters struct {

	// +crossplane:generate:reference:type=Bucket
	// +kubebuilder:validation:Optional
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// Reference to a Bucket to populate bucket.
	// +kubebuilder:validation:Optional
	BucketRef *v1.Reference `json:"bucketRef,omitempty" tf:"-"`

	// Selector for a Bucket to populate bucket.
	// +kubebuilder:validation:Optional
	BucketSelector *v1.Selector `json:"bucketSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	VersioningConfiguration []VersioningConfigurationParameters `json:"versioningConfiguration,omitempty" tf:"versioning_configuration,omitempty"`
}

type VersioningConfigurationInitParameters struct {
	ExcludeFolders *bool `json:"excludeFolders,omitempty" tf:"exclude_folders,omitempty"`

	ExcludedPrefixes []*string `json:"excludedPrefixes,omitempty" tf:"excluded_prefixes,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type VersioningConfigurationObservation struct {
	ExcludeFolders *bool `json:"excludeFolders,omitempty" tf:"exclude_folders,omitempty"`

	ExcludedPrefixes []*string `json:"excludedPrefixes,omitempty" tf:"excluded_prefixes,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type VersioningConfigurationParameters struct {

	// +kubebuilder:validation:Optional
	ExcludeFolders *bool `json:"excludeFolders,omitempty" tf:"exclude_folders,omitempty"`

	// +kubebuilder:validation:Optional
	ExcludedPrefixes []*string `json:"excludedPrefixes,omitempty" tf:"excluded_prefixes,omitempty"`

	// +kubebuilder:validation:Optional
	Status *string `json:"status" tf:"status,omitempty"`
}

// BucketVersioningSpec defines the desired state of BucketVersioning
type BucketVersioningSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BucketVersioningParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider BucketVersioningInitParameters `json:"initProvider,omitempty"`
}

// BucketVersioningStatus defines the observed state of BucketVersioning.
type BucketVersioningStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BucketVersioningObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// BucketVersioning is the Schema for the BucketVersionings API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,minio}
type BucketVersioning struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.versioningConfiguration) || (has(self.initProvider) && has(self.initProvider.versioningConfiguration))",message="spec.forProvider.versioningConfiguration is a required parameter"
	Spec   BucketVersioningSpec   `json:"spec"`
	Status BucketVersioningStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BucketVersioningList contains a list of BucketVersionings
type BucketVersioningList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BucketVersioning `json:"items"`
}

// Repository type metadata.
var (
	BucketVersioning_Kind             = "BucketVersioning"
	BucketVersioning_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: BucketVersioning_Kind}.String()
	BucketVersioning_KindAPIVersion   = BucketVersioning_Kind + "." + CRDGroupVersion.String()
	BucketVersioning_GroupVersionKind = CRDGroupVersion.WithKind(BucketVersioning_Kind)
)

func init() {
	SchemeBuilder.Register(&BucketVersioning{}, &BucketVersioningList{})
}
